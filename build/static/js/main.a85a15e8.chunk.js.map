{"version":3,"sources":["components/Image/Image.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Sizes","ImgwithLoader","props","_useState","useState","_useState2","Object","slicedToArray","loaded","setLoaded","react_default","a","createElement","Fragment","assign","onLoad","ClicableImage","_ref","img","_useState3","expanded","_useState4","setExpanded","image","thumbnail","onClick","Image_ImgwithLoader","src","height","width","role","App","Image","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8IAeKA,4FATCC,EAAmC,SAAAC,GAAS,IAAAC,EACtBC,oBAAS,GADaC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3CK,EAD2CH,EAAA,GACnCI,EADmCJ,EAAA,GAElD,OAASK,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,MACKL,GAAWE,EAAAC,EAAAC,cAAA,qBACbF,EAAAC,EAAAC,cAAA,MAAAN,OAAAQ,OAAA,GAASZ,EAAT,CAAiBa,OAAQ,kBAAMN,GAAU,mBAKhDT,+CAYL,IAaegB,EAbwB,SAAAC,GAAqC,IAAnCC,EAAmCD,EAAnCC,IAAmCC,GAAAF,EAA9BG,SACVhB,oBAAS,IAD+BiB,EAAAf,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GACjEC,EADiEC,EAAA,GACvDC,EADuDD,EAAA,GAEhEE,EAAqBL,EAArBK,MAAOC,EAAcN,EAAdM,UACf,OACId,EAAAC,EAAAC,cAAA,OAAKa,QAAS,kBAAMH,GAAaF,KAE1BA,EAAWV,EAAAC,EAAAC,cAACc,EAAkBH,GACnBb,EAAAC,EAAAC,cAACc,EAAkBF,KC7BvCD,EAAwB,CAC5BA,MAAO,CACLI,IAAK,uFACLC,OAAQ,IACRC,MAAO,KAETL,UAAW,CACTG,IAAK,uFACLC,OAAQ,GACRC,MAAO,IAETC,KAAM,MAaOC,mLARX,OACErB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACoB,EAAD,CAAed,IAAKK,YAJRU,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a85a15e8.chunk.js","sourcesContent":["import React, { useState, lazy, Suspense } from 'react'\r\nimport  { ImageWithThumb, ImageV2 } from '../../models/a'\r\n\r\n\r\nconst DefaultLoader = () => <>'loading...'</>\r\n\r\nconst ImgwithLoader: React.FC<ImageV2> = props => {\r\nconst [loaded, setLoaded] = useState(false) \r\nreturn  (<>\r\n            {!loaded &&  <h1>loading</h1>}\r\n            <img {...props}  onLoad={() => setLoaded(true)}/>\r\n            \r\n        </>)\r\n}\r\n\r\nenum Sizes {\r\n    fool = '-fool',\r\n    thumb = '-thumb'\r\n} \r\n\r\ninterface Props extends ImageDC {\r\n    expanded?: boolean\r\n    img: ImageWithThumb\r\n}\r\n\r\n\r\n\r\nconst ClicableImage: React.FC<Props> = ({img, expanded: expandedByDef }) => {\r\n    const [expanded, setExpanded] = useState(false)  \r\n    const { image, thumbnail } = img\r\n    return  (\r\n        <div onClick={() => setExpanded(!expanded)}>\r\n           {\r\n               expanded ? <ImgwithLoader {...image}/>\r\n                        : <ImgwithLoader {...thumbnail}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClicableImage\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ClicableImage from './components/Image/Image.tsx';\nimport  { ImageWithThumb } from './models/a'\n\nconst image: ImageWithThumb = {\n  image: {\n    src: 'https://atulhost.com/wp-content/uploads/2016/08/indian-flag-hd-wallpapers-images.jpg',\n    height: 100,\n    width: 100\n  },\n  thumbnail: {\n    src: 'https://atulhost.com/wp-content/uploads/2016/08/indian-flag-hd-wallpapers-images.jpg',\n    height: 50,\n    width: 50\n  },\n  role: null\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <ClicableImage img={image} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.tsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}